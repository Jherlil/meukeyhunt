diff --git a/keyhunt.cpp b/keyhunt.cpp
--- a/keyhunt.cpp
+++ b/keyhunt.cpp
@@
-#include "IA_wrapper.h"
+#include "IA_wrapper.h"
+#include <omp.h>   // ðŸ”¥ NEW: para paralelizar o loop IA

@@
     std::cout << "[INIT] MÃ³dulos de IA e RL prontos." << std::endl;

+    // ------------------------------------------------------------
+    // defina o nÃºmero de threads OpenMP de acordo com -t <n>
+    // ------------------------------------------------------------
+    omp_set_num_threads(NTHREADS > 0 ? NTHREADS : 1);
+
@@  // (logo DEPOIS de ordenar/ler o arquivo de endereÃ§os, ANTES do bloco MODE_BSGS)
+
+    /* =======================================================================
+       LOOP DE BUSCA GUIADO PELA IA â€“ modos address / rmd160
+       ======================================================================= */
+    if (FLAGMODE == MODE_ADDRESS || FLAGMODE == MODE_RMD160) {
+        while (true) {
+            ia::Range cur = ia::next_range();        // IA decide o prÃ³ximo range
+
+            if (!FLAGQUIET) {
+                printf("[IA] Range 0x%llx â€“ 0x%llx (stride %llu)\n",
+                       (unsigned long long)cur.from,
+                       (unsigned long long)cur.to,
+                       (unsigned long long)cur.stride);
+            }
+
+            #pragma omp parallel for schedule(dynamic,256)
+            for (uint64_t k = cur.from; k <= cur.to; k += cur.stride) {
+                std::string priv_hex = to_hex(k);
+
+                if (!ia::keep_key(priv_hex, cur)) continue;  // filtragem IA
+
+                bool hit = check_key(priv_hex.c_str());     // verificaÃ§Ã£o real
+
+                FeatureSet f = extract_features(priv_hex);
+                RLAgent::observe(f, MLEngine::ml_predict(f.to_vector()), hit);
+                ia::reward(cur, hit, f);
+            }
+
+            RLAgent::learn();  // atualiza o agente RL
+        }
+        return 0;   // nunca chega aqui a menos que o loop seja interrompido externamente
+    }
+
 /* -------------- CONTINUA fluxo original (BSGS, vanity, etc.) -------------- */
